c
 prod.samples_with_metric(metric).count
samples.count
samples
smaples
 prod.samples_with_metric metric
 prod.samples_with_metric metric end
if samples == prod.samples_with_metric metric end
if samples == prod.samples_with_metric metric
samples == prod.samples_with_metric metric
samples.eql prod.samples_with_metric metric
samples.eql prod.samples_with_metic metric
samples
n
c
prod.samples_with_metric metric
samples
smaples
c
n
c
n
c
definition
c
@product
@product.save
c
@product.valid?
@product.save
@product
n
@product
c
@product
c
@product.experiment_definitions.joins(:metric)
@product.experiment_definitions.first.save
@product.experiment_definitions
@product.experiment_definitions.joins(:metric)
@product.experiment_definitions.joins(:metrics)
@product.save
@product.experiment_definitions.joins(:metrics)
@product.experiment_definitions.joins(:metric)
metric
@product.experiment_definitions.joins(:metric).where("metrics.name=?",metric)
@product.experiment_definitions.joins(:metric).where("metrics.name=?",metric).first
 @product.experiment_definitions
definition
c
error
n
@sample
n
@product.samples
n
unless @sample puts(wrong) end
unless @sample puts wrong end
unless @sample
@sample
n
@sample
n
@product.samples
@product
n
c
n
c
error
erroe
n
c
n
c
exception
n
c
!(@products.third.ingredients.any?{|ing| ing.id.eql? params.require(:ingredient_id).to_i})
!(@products.third.ingredients.any?{|ing| ing.id.eql? params.require(:ingredient_id)})
!(@products.third.ingredients.any?{|ing| ing.id.eql? params.require(:ingredient_id).to_i})
!(@products.third.ingredients.any?{|ing| ing.id.eql? params.require(:ingredient_id)})
@products.third.ingredients.map{|m| m.name}
@product.third.ingredients.map{|m| m.name}
!(@products.third.ingredients.any?{|ing| ing.id.eql? params.require(:ingredient_id)})
@products.second.ingredients.any?{|ing| ing.id.eql? params.require(:ingredient_id)}
!(@products.second.ingredients.any?{|ing| ing.id.eql? params.require(:ingredient_id)})
!(@products.first.ingredients.any?{|ing| ing.id.eql? params.require(:ingredient_id)})
@products
n
c
@products
!(@products.first.ingredients.any?{|ing| ing.id.eql? params.require(:ingredient_id)})
@products.delete_if{|product| !(product.ingredients.any?{|ing| ing.id.eql? params.require(:ingredient_id)})}
@products.delete_if{|product| product.ingredients.any?{|ing| ing.id.eql? params.require(:ingredient_id)}}
@products.delete_if{|product| !product.ingredients.any?{|ing| ing.id.eql? params.require(:ingredient_id)}}
n
@products
n
cls
n
c
exception
n
c
@products.delete_if{|product| !product.ingredients.any?{|ing| ing.id.eql? params.require(:ingredient_id)}}
c
@products.delete_if{|product| !product.ingredients.any?{|ing| ing.id.eql? params.require(:ingredient_id)}}
@products.all{|p| p.ingredients.find(params.perimt(:ingredient_id)).count>0}
@products.all{|p| p.ingredients.find(params.perimt(:ingredient_id))!=nil}
Ingredient.find(4)
params.permit :ingredient_id
@products.all{|p| p.ingredients.find(params.perimt(:ingredient_id))}
@products.all{|p| p.ingredients.count > 2}
c
@products
n
@products
c
labels
serie.map{|x| x.to_f}
c
prod
serie.map{|x| x.to_f}
c
serie.map{|x| x.to_f}
seire.map{|x| x.to_f}
prod
serie
c
serie
c
serie
n
c
prod
n
c
@c
c
chart.data
labels
c
params[:sensory_analysis][:metric_id]
params[:sensory_analysis]
params[:repetition_id]
params["metric_id"]
params[:metric_id]
params
c
chart.data
labels
exit
c
labelsc
c
labels
c
labels
c
labels
c
labels
index
n
labels
index
c
vals.min * 0.8
vals.max * 1.1
vals.min
vals.max
vals = @chart_data.map{|x| x[:value].to_f}
@chart_data.map{|x| x[:value].to_f}
(@chart_data.max{|x| x[:value]}[:value].to_f*1.1).to_f
(@chart_data.min{|x| x[:value]}[:value].to_f*0.8).to_f
(@chart_data.min{|x| x[:value]}[:value]*0.8).to_f
(@chart_data.min{|x| x[:value]}[:value] *0.8).to_f
(@chart_data.mim{|x| x[:value]}[:value] *1.1).to_f
(@chart_data.max{|x| x[:value]}[:value] *1.1).to_f
(@chart_data.max{|x| x[:value]}[:value] *1.1).to_F
@chart_data.max{|x| x[:value]}[:value] *1.1
@chart_data.max{|x| x[:value]}[:value]
@chart_data.max{|x| x[:value]}[:value}
@chart_data.max{|x| x[:value]}
c
@chart_data
n
c
@competitors
@chart_data
n
c
@chart_data
c
@chart_data
c
path
n
c
@path
n
c
n
c
response
n
response
n
c
n
response
n
@recipe.valid?
@recipe.valid
@recipe
@recipe.valid
c
controller.controller_name
controller
controller_name
javascript_include_tag "application", controller_name
controller_name
c
[controller+".js"]
%w(controller+".js.coffee")
%w(controller)
c
nn
n
controller
n
controller
c
flash[:notice]
flash
params[:notice]
params
c
4c
c
@competitors.delete_if{|co|!co.experiment_definitions.where('metric_id=?',3)}
@competitors.defelte_if{|co|!co.experiment_definitions.where('metric_id=?',3)}
!co.experiment_definitions.where('metric_id=?',3)
co.experiment_definitions.where('metric_id=?',3)
co.experiment_definitions.where('metric_id=?'3)
co.experiment_definitions
co = @competitors[0]
@competitors
n
@competitors
c
sample.amount.to_f
sample.amount
repetitions.map{|r| r.sample_id}
sampler
