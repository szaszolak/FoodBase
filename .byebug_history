c
Math.sqrt( repetitions.map{|s| (s.value - avg)**2}.sum * (1 / (repetitions.size - 1)))
Math.sqrt( repetitions.map{|s| (s.value - avg)**2} * (1 / (repetitions.size - 1)))
Math.sqrt( repetitions.map{|s| (s.value - avg)**2) * (1 / (repetitions.size - 1))
Math.sqrt( repetitions.map{|s| (s.value - avg)**2) * (1 / (repetitions.size - 1)))
c
avg
c
cc
c
n
c
Math.sqrt(repetitions.map{|s| (s.value - avg)**2}.sum()*(1/(repetitions.size - 1)))
Math.sqrt(repetitions.map{|s| (s.value - avg)**2}.sum()*(1/(repetitions.count - 1)))
repetitions.map{|s| (s.value - avg)**2}.sum() * 2
repetitions.map{|s| (s.value - avg)**2}.sum()
Math.sqrt(repetitions.map{|s| (s.value - avg)**2}.sum()*(1/(repetitions.count - 1)))
repetitions.sum{|s| (s.value - avg)**2}
Math.sqrt(repetitions.sum{|s| (s.value - avg)**2})
Math.sqrt(repetitions.sum{|s| (s.value - avg)**2}*(1/(repetitions.count - 1)))
Math.sqrt(repetitions.map{|s| (s.value - avg)**2}.sum()*(1/(repetitions.count - 1)))
Math.sqrt(repetitions.map{|s| (s.value - avg)**2}.sum()*(1/(repetitions.count - 1))
Math.sqrt(repetitions.map{|s| (s.value - avg)**2}.sum())
Math.sqrt(repetitions.map{|s| (s.value - avg)**2})
avg
c
product.samples
n
c
product.samples
n
c
product.recipes
product.samples
n
product.samples
product
c
@products
n
c
@products
n
c
n
@products
n
@products
params
c
@products
n
params
exit
@analysis.value
c
@analysis.value
c
@analysis.value
exit
n
column[i]
@analysis.value
exit
c
column.count
column[0]
column[1]
column[2]
i.to_S
i
column
column[i]
@analysis.value
@analysis.value.to_s
@analysis.value.to_S
c
column[i]
@analysis.value
c
Metric.find_by_name(column.first.downcase)
c
n
Metric.find_by_name(column.first.downcase)
c
cc
c
n
@metric
n
column
c
sheet.column(i)[2,sheet.column(i).count]
sheet.column(i)[2,(sheet.column(i).count-3)]
c
column
c
sheet.column(i)[2,sheet.column(i).count]
sheet.column(i)[3,sheet.column(i).count]
c
column
c
sheet.column(i)
e i
i
c
column
column.first
n
c
n
c
sheet.column(4)[3,(sheet.column(i).count)]
sheet.column(4)[3,(column(i).count)]
sheet.column(4)[3,(column(i).count]
sheet.column(4)
c
sheet.first.count
sheet.first
sheet.columns
eval sheet.column(1).first
eval sheet.column(1)
eval sheet.column
eval sheet
c
n
c
v l
c
v l
c
eval @product.recipes.count.to_s
eval @product.recipes.count.to_S
eval @product.recipes.count
v l
c
eval names[0]
eval names
e names[0]
e names
eval @product.recipes[0].ingredient.name
eval @product.recipes[0]
eval @product.recipe[0]
eval @product
eval
e @product
v l
c
n
c
n
v l
n
s
c
n
v l
