c
charts
@charts
n
metric.id.to_s
metric.id.to_S
metric.id
metric
c
avgs.map{|x|x[1]}.max.to_i
avgs.map{|x|x[1]}.max
avgs.first[1].to_i
avgs.first
avgs.max{|x|x[1]}[1].to_i
avgs.max{|x|x[1]}[1]
avgs.max{|x|x[1]}
avgs.max
line_chart.maximum_value.to_i
line_chart.minimum_value.to_i
n
c
avg[0]
avg[1].to_i
c
avg[1].to_i
avg[1]
avg[0]
avg
metric
c
metric
c
metric
c
metric
c
line_chart.maximum_value.to_i
line_chart.minimum_value.to_i
line_chart.minimum_value
line_chart.minimum_value8
line_chart.maximum_value
avgs.first[1]*0.8
avgs.first[1]*1.1
avgs.first[1]*0.8
avgs.first[1]
avgs.first
avgs(0)
avgs.first
avgs[1]
avgs
avgs[1]*0.8
avgs[0]*0.8
avgs
line_chart.minimum_value
line_chart.maximum_value
n
line_chart.minimum_value
line_chart.maximum_value
line_chart.data
avgs
metric
c
metric
c
metric
c
metric
c
metric
c
metric
c
metric
cmetric
c
line_chart.maximum_value
avgs
line_chart.maximum_value
n
c
avgs
line_chart.maximum_value
n
c
avgsa
line_chart.maximum_value
line_chart.minimum_value
n
c
line_chart.minimum_value
line_chart.minmum_value
line_chart.maximum_value
n
c
cc
c
avgs.max[1] *1.5
avgs.max[1] *1,5
avgs.max[1] *1
avgs.max[1]
avgs.max
avgs.amx
c
avg[1]
avg[0]
avg.id
avg
cavg
c
cc
c
metric.id
metirc.id
@product.id
avg
c
avg
c
cc
c
@product.samples.joins(:sensory_analyses).where("sensory_analyses.metric_id=?", metric.id).distinct.count
count
@product.samples.joins(:sensory_analyses).where("sensory_analyses.metric_id=?", metric.id).distinct 
@product.samples.joins(:sensory_analyses).where("sensory_analyses.metric_id=?", metric.id).distinct.count
@product.samples.joins(:sensory_analyses).where("sensory_analyses.metric_id=?", metric.id).distinct
@product.samples.joins(:sensory_analyses).where("sensory_analyses.metric_id=?", metric.id).disticnt
@product.samples.joins(:sensory_analyses).where("sensory_analyses.metric_id=?", metric.id)
metric.id
metric.name
@product.samples.joins(:sensory_analyses).where("sensory_anlyses.metric_id=?", metric.id)
@product.samples.joins(:sensory_analyses).count
@product.samples.joins(:sensory_analyses)
@product.samples.joins(:sensory_analyses).where("sensory_anlyses.metric_id=?", metric.id)
@product.samples
c
cc
c
@product.samples.joins(:sensory_analyses).where("sensory_anlyses.metric_id=?", metric.id).distinct.count
@product.samples.joins(:sensory_analyses).where("sensory_anlyses.metric_id=?", metric.id).distinct.all
@product.samples.joins(:sensory_analyses).where("sensory_anlyses.metric_id=?", metric.id).distinct
@product.samples.joins(:sensory_analyses).where("sensory_anlyses.metric_id=?", metric.id).distinct.count
c
exit
@product.samples.joins(:sensory_analyses).where("sensory_anlyses.metric_id=?", metric.id).distinct.count
@product.samples.joins(:sensory_analyses).where("sensory_anlyses.metric_id=?", metric.id).distinct
c
exit
c
@product.samples.joins(:sensory_analyses).where("sensory_anlyses.metric_id=?", metric.id).distinct
@product.samples.joins(:sensory_analyses).where("sensory_anlyses.metric_id=?", metric.id).distinct.length
@product.samples.joins(:sensory_analyses).where("sensory_anlyses.metric_id=?", metric.id).distinct.count
@product.samples.joins(:sensory_analyses).where("sensory_anlyses.metric_id=?", metric.id).distinct
@product.sampes.joins(:sensory_analyses).where("sensory_anlyses.metric_id=?", metric.id).distinct
c
@product.metrics
c
@charts
c
current_user.get_charts
c
charts
c
current_user.get_charts
c
@charts[0].path
@charts
file
c
current_user.get_charts
c
current_user.get_charts
current_user
@charts
n
c
current_user
n
c
@charts
c
n
@charts
c
@charts
c
@charts
c
exit
c
cc
c
n
session[:charts]
session
c
n
c
cc
c
image_tag(File.basename(chart.path))
File.basename(chart.path)
c
@charts
n
file.path
n
c
n
metric.name
metric
c
@charts
c
@charts
n@cahrts
n
@product.metrics.distinct
@product.metrics
@product
c
@charts
c
@product
c
n
@file.path
n
c
@file.path
n
c
@file.path
@file
n
c
n
c
n
exit
svgImg.to_blob
svgImg.clone
svgImg.crop
@img.path
svgImg.write
svgImg
svgImage
c
@img.to_blob
@img
img
c
JSON.parse(svg).count
JSON.parse(svg)[0]
JSON.parse(svg)
svg
c
